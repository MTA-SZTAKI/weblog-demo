<?xml version="1.0" encoding="UTF-8"?>
<!--
Blocks for user identification based on cookies and browser data.
-->
<block-package xmlns="urn:hu.sztaki.ilab.longneck:1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="urn:hu.sztaki.ilab.longneck:1.0 file:///home/molnarp/NetBeansProjects/longneck/longneck-core/src/main/resources/schema/longneck-block.xsd">

  <!--
    Preprocess the input from weblog parser.

    This block creates the fields needed to establish userid information.

    IN: refererUrl, requestCookie, responseCookie clientip userAgent
    OUT: apacheCookie googleCookie ipAndUserAgentHash
  -->
  <block id="preprocess" version="1">
    <!-- If referer is "-", null out -->
    <if>
      <equals apply-to="refererUrl" value="-"/>
      <then>
        <set apply-to="refererUrl" value=""/>
      </then>
    </if>
    
    <!-- 
      parse response cookie for Apache or Google cookie 
      (response contains the cookie is it is assigned at first too)
    -->
    <if>
      <or>
       <exists apply-to="responseCookie"/>
       <exists apply-to="requestCookie"/> 
      </or>              
      <then>
        <block-ref id="userid:apache.cookie" version="1"/>
        <block-ref id="userid:google.cookie" version="1"/>
      </then>
    </if>

    <!-- Calculate clientip and user agent hash -->
    <hash apply-to="ipAndUserAgentHash" sources="clientip userAgent"/>

    <output-constraints summary="">
      <!-- host: dotted quad -->
      <match apply-to="clientip" regexp="^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$"/>
      <or>
        <is-null apply-to="apacheCookie"/>
        <match apply-to="apacheCookie" regexp="^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]+$"/>
      </or>
      <or>
        <is-null apply-to="googleCookie"/>
        <match apply-to="googleCookie" regexp="^[0-9]+\.[0-9]+$"/>        
      </or>
    </output-constraints>
  </block>
     
  <!-- 
    Apache cookie: Apache=<ipv4 dotted quad>.<session-id>

    Note, that the closing semicolon is optional.

    IN: requestCookie, responseCookie
    OUT: apacheCookie: NULL or full apache cookie
  -->
  <block id="apache.cookie" version="1">
    <!-- extract Apache cookie -->
    <set-null apply-to="apacheCookie"/>
    
    <if>
      <match apply-to="requestCookie" regexp="Apache=[0-9\.]+"/>
      <then>
        <match-extract apply-to="requestCookie" regexp="Apache=([0-9\.]+)">
          <copy apply-to="apacheCookie" from="$1"/>
        </match-extract>
      </then>
    </if>
    <if>
      <match apply-to="responseCookie" regexp="Apache=[0-9\.]+"/>
      <then>
        <match-extract apply-to="responseCookie" regexp="Apache=([0-9\.]+)">
          <copy apply-to="apacheCookie" from="$1"/>
        </match-extract>
      </then>
    </if>
    
  </block>

  <!-- 
    Google __utma cookie format:
    <domain hash>.<unique visitor id>.<timstamp of first visit>.
    <timestamp of previous (most recent) visit>.<timestamp of current visit>.<visit count>

    Example: __utma=134426465.817437171.1308436692.1308436692.1308436692.1;

    Note, that the closing semicolon is optional.

    IN: requestCookie, responseCookie
    OUT: googleCookie: NULL or 134426465.817437171
  -->
  <block id="google.cookie" version="1">
    <set-null apply-to="googleCookie"/>
    
    <!-- TODO: duplicated to include response cookies; needs simplification. -->
    <if>
      <match apply-to="responseCookie" regexp="__utma=[0-9\.]+"/>
      <then>
        <match-extract apply-to="responseCookie" regexp="__utma=([0-9\.]+)">            
          <!-- extract domain hash and unique visitor id -->
          <if>
            <match apply-to="$1" regexp="^[0-9]+\.[0-9]+(\..*)?$"/>
            <then>
              <match-extract apply-to="$1" regexp="^([0-9]+)\.([0-9]+)(\..*)?$">
                <implode apply-to="googleCookie" glue="." sources="$1 $2"/>
              </match-extract>
              <check summary="">
                <match apply-to="googleCookie" regexp="^[0-9]+\.[0-9]+$"/>
              </check>
            </then>
          </if>
        </match-extract>            
      </then>
    </if>
    <if>
      <match apply-to="requestCookie" regexp="__utma=[0-9\.]+"/>
      <then>
        <match-extract apply-to="requestCookie" regexp="__utma=([0-9\.]+)">            
          <!-- extract domain hash and unique visitor id -->
          <if>
            <match apply-to="$1" regexp="^[0-9]+\.[0-9]+(\..*)?$"/>
            <then>
              <match-extract apply-to="$1" regexp="^([0-9]+)\.([0-9]+)(\..*)?$">
                <implode apply-to="googleCookie" glue="." sources="$1 $2"/>
              </match-extract>
              <check summary="">
                <match apply-to="googleCookie" regexp="^[0-9]+\.[0-9]+$"/>
              </check>
            </then>
          </if>
        </match-extract>            
      </then>
    </if>

  </block>

  <!-- 
    Assign referer tracking id.
  
    IN: timeInMillis, ipAndUserAgentHash, requestUrl, refererUrl
    OUT: visitorRefererId
  -->
  <block id="assign.visitorrefererid" version="1">

    <!-- Assign referer tracking id -->
    <assign-visitorrefererid connection-name="userdb" max-distance="600000"/>
    
    <output-constraints summary="">
      <exists apply-to="visitorRefererId"/>
    </output-constraints>
  </block>
  
  <!-- 
    Assign cookie tracking id.
  
    IN: apacheCookie, googleCookie
    OUT: visitorCookieId
  -->
  <block id="assign.visitorcookieid" version="1">

    <!-- Assign cookie tracking id -->
    <assign-visitorcookieid connection-name="userdb"/>
    
    
    <output-constraints summary="">
      <exists apply-to="visitorCookieId"/>
    </output-constraints>
  </block>
  
  <!-- 
    Assign user id.
  
    IN: visitorCookieId, visitorRefererId
   OUT: visitorUserId
  -->
  <block id="assign.visitoruserid" version="1">

    <!-- Assign cookie tracking id -->
    <assign-visitoruserid connection-name="userdb"/>
    
    <output-constraints summary="">
      <exists apply-to="visitorUserId"/>
    </output-constraints>
    
  </block>  
</block-package>
