<?xml version="1.0" encoding="UTF-8"?>
<process xmlns="urn:hu.sztaki.ilab.longneck:1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <source>
    <database-source connection-name="weblog_demo">
      <query>          
        select virtual_host as "serverHost", 
               to_char(request_time,'YYYY.MM.DD HH24:MI:SS') as "requestTime", 
               event_group as "eventGroup", event as "event", event_subject as "eventSubject",
               visitor_ip as "ipAddress", 
               inet_protocol as "inetProtocol", http_method as "httpMethod", http_status_code as "httpStatusCode", 
               http_request as "httpRequest",
               request_url as "requestUrl", request_url_parameter as "requestUrlParameter", request_url_extension as "requestUrlExtension", 
               auth_user as "authUser", bytes_sent as "bytesSent"
        from weblog_event_incoming_p2 s          
      </query>
    </database-source>
  </source>

  <target>
    <database-target connection-name="weblog_demo">
      <truncate-query>
          truncate table weblog_event_incoming
      </truncate-query>
      <insert-query numeric-fields-to-convert="httpStatusCode">
        insert into weblog_event_incoming (
            virtual_host, virtual_host_owner, request_timestamp, event_group, event, event_subject,
            visitor_ip, visitor_hostname, visitor_ip_resolv_time, 
            visitor_ip_resolv_expire, 
            inet_protocol, http_method, http_status_code, 
            http_request,
            request_url, request_url_parameter, request_url_extension,  
            auth_user, bytes_sent
        ) values (
            :serverHost, null, to_timestamp(:requestTime, 'YYYY.MM.DD HH24:MI:SS'), :eventGroup, :event, :eventSubject,
            :ipAddress, :domainName, current_timestamp,
            to_timestamp(:lookupExpiry,'YYYY-MM-DD HH24:MI:SS'),
            :inetProtocol, :httpMethod, :httpStatusCode, 
            :httpRequest,
            :requestUrl, :requestUrlParameter, :requestUrlExtension,  
            :authUser, case when :bytesSent='-' then 0 else cast (:bytesSent as numeric) end
        )
      </insert-query>
    </database-target> 
  </target>

  <error-target>
    <database-target connection-name="weblog_demo">
      <truncate-query>   
        truncate table weblog_event_incoming_err
      </truncate-query>
      <insert-query>
       insert into weblog_event_incoming_err ( 
           error_time, server_host, request_timestamp, class_name, field, field_value, 
           details, document_url, document_line, document_column
       ) values (
          current_timestamp, :serverHost, to_timestamp(:requestTime, 'YYYY.MM.DD HH24:MI:SS'), 
          :class_name, :field, :value, :details, :document_url, :document_line, :document_column
       )
      </insert-query>
    </database-target>
  </error-target>

  <blocks>  
      
    <!-- set timeInMillis for userid extension -->
    <datetime-to-milliseconds apply-to="timeInMillis" from="requestTime" pattern="yyyy.MM.dd HH:mm:ss"/>
    
    <dnsresolve connection-name="dnsCache"/>
    
    <!-- Set global (valid between sites) user id -->
    <set-null apply-to="visitorUserId" />
    
    <!-- Add prefix to visitor ids -->
    <!-- easy way of surviving loss of userid memory (berkeleydb): 
         increase the following prefix if the userid database is dropped and rebuilt -->
    <set apply-to="$dbprefix" value="1-"/>
    <if>
      <not-null apply-to="visitorUserId" />
      <then>
        <implode apply-to="visitorUserId" sources="$dbprefix visitorUserId" glue=""/>
      </then>
    </if>
    
  </blocks>

</process>
